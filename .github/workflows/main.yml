name: Task

on:
  workflow_dispatch:
  repository_dispatch:
    types: [restart-vds]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Data from Backup (artifact)
        id: restore
        run: |
          set -euo pipefail
          echo "No automatic restore implemented — ensure relevant files are in the repo or provide manual restore steps."

      - name: Setup and Run tmate (ephemeral)
        id: tmate_session
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y tmate jq
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          TMATE_SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          TMATE_WEB=$(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')
          echo "::add-mask::${TMATE_SSH}"
          echo "::add-mask::${TMATE_WEB}"
          echo "TMATE_SSH_URL=${TMATE_SSH}" >> $GITHUB_OUTPUT
          echo "TMATE_WEB_URL=${TMATE_WEB}" >> $GITHUB_OUTPUT

      - name: Save SSH Link to File (local only)
        run: |
          set -euo pipefail
          echo "${{ steps.tmate_session.outputs.TMATE_SSH_URL }}" > ssh_link.txt
          echo "${{ steps.tmate_session.outputs.TMATE_WEB_URL }}" >> ssh_link.txt
          chmod 600 ssh_link.txt

      - name: Start test.sh in background (supervised)
        run: |
          set -euo pipefail
          chmod +x ./test.sh || true
          cat > ./run_test_supervised.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          # Запускаем тест в фоне и записываем его PID
          sudo nohup ./test.sh > test.log 2>&1 &
          child=$!
          echo $child > test.pid
          # Ожидаем завершения дочернего процесса
          wait $child
          exit $?
          EOF
          chmod +x ./run_test_supervised.sh
          # Запускаем supervised скрипт в background так, чтобы он пережил закрытие tmate
          nohup ./run_test_supervised.sh > supervise.log 2>&1 &
          echo $! > supervise.pid

      
      - name: Notify via Telegram (send SSH link) and short window
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TMATE_SSH: ${{ steps.tmate_session.outputs.TMATE_SSH_URL }}
          TMATE_WEB: ${{ steps.tmate_session.outputs.TMATE_WEB_URL }}
        run: |
          set -euo pipefail
          if [ -z "${TMATE_SSH}" ] && [ -z "${TMATE_WEB}" ]; then
            echo "No tmate link available, skipping Telegram notify."
          else
            TEXT="TMATE SSH: ${TMATE_SSH}%0AWeb: ${TMATE_WEB}%0A(Ссылка замаскирована в логах.)"
            TELE_URL="https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
            curl -s -X POST "${TELE_URL}" -d chat_id="${TELEGRAM_CHAT_ID}" -d parse_mode="HTML" -d text="${TEXT}" | jq -e '.ok' >/dev/null
          fi
          echo "Ephemeral tmate window: 10 minutes"
          sleep 500
          # После окна убиваем только tmate-сервер (не фоновые процессы)
          tmate -S /tmp/tmate.sock kill-server || true


      - name: Wait for supervised test to finish (or timeout)
        run: |
          set -euo pipefail
          # Ждём до 40 минут максимум на завершение теста после закрытия tmate
          MAX_WAIT=5500
          if [ -f supervise.pid ]; then
            PID=$(cat supervise.pid)
            echo "Supervise PID: $PID"
            ELAPSED=0
            while kill -0 "$PID" 2>/dev/null; do
              if [ $ELAPSED -ge $MAX_WAIT ]; then
                echo "Timeout waiting for supervised process; will proceed to backup. (PID $PID still running)"
                break
              fi
              sleep 10
              ELAPSED=$((ELAPSED+10))
            done
          else
            echo "No supervise.pid found; checking test.pid"
            if [ -f test.pid ]; then
              PID=$(cat test.pid)
              echo "Test PID: $PID"
              while kill -0 "$PID" 2>/dev/null; do
                sleep 5
              done
            else
              echo "No background PID files found."
            fi
          fi


      - name: Create Backup
        run: |
          set -euo pipefail
          echo "Creating data backup..."
          # Исключаем .git и артефакты, а также временный файл с ссылкой
          zip -r test.zip . -x ".git/*" "test.zip" "ssh_link.txt" "test.log"

      - name: Commit Backup and SSH Link
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "test update"
          # Указываем, какие файлы коммитить
          file_pattern: "test.zip"

      - name: Trigger Next Run
        run: |
          echo "Triggering VDS restart..."
          # Отправляем запрос к API GitHub, чтобы запустить этот же воркфлоу снова
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            -d '{"event_type": "restart-vds"}'
